
import java.util.Scanner;
import javax.swing.DefaultListModel;


/**
 *
 * @author umair
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        readyList.setModel(ready);
        runningList.setModel(running);
        waitingList.setModel(waiting);
        int numOfProcess=1;
        int io=0;
        int execTime=5; //5 seconds default
        Scanner in =new Scanner(System.in);
        System.out.println("Number of Process: ");
        numOfProcess=in.nextInt();
       
        System.out.println("Number of I/O: ");
        io=in.nextInt();
        
        System.out.println("Execution time in seconds: ");
        execTime=in.nextInt();
        //System.out.println("Number of Process: "+numOfProcess+"\nI/O Requests: "+io +"\nExecution Time: "+execTime);
        
        for (int i=1 ; i<=numOfProcess ;i++){
            ThreadDemo t=new ThreadDemo("Thread-"+i,io,execTime);
            ready.addElement("Thread-"+i);  //add to ready queue
            t.start();
        }

       
        
    }
    
   public class ThreadDemo extends Thread {
   private Thread t;
   private String threadName;
   private int input_output;
   private int execTime;
   
   ThreadDemo(String name,int io,int time){
       threadName = name;
       input_output=io;
       execTime=time;
       System.out.println("Creating " +  threadName );
       jTextArea1.append("Creating " +  threadName + "\n");

       
       
       
   }
   public void run() {
      System.out.println("Running " +  threadName );
      jTextArea1.append("Running " +  threadName + "\n");
      
      //Add to runnig queue & Remove from Ready queue
       if (!ready.isEmpty()){
        ready.removeElement(threadName);
       } 
       running.addElement(threadName);
      
      
      try {
         for(int i = execTime; i > 0; i--) {
            
            System.out.println("Thread: " + threadName + ", " + i );
            jTextArea1.append("Thread: " + threadName + ", " + i + "\n");
            Thread.sleep(1000);
            
            if (input_output > 0){
                
                for (int j=input_output ; j>0 ; j--)
                {
                    Thread.yield();
                    System.out.println(threadName+"Interupted by I/O:"+input_output);
                    jTextArea1.append(threadName+"Interupted by I/O:"+input_output);
                      if (!running.isEmpty()){
                        running.removeElement(threadName);
                       
                       } 
                        waiting.addElement(threadName);
                }
                if (!waiting.isEmpty()){
                waiting.removeElement(threadName);
                running.addElement(threadName);
               } 
            }
            
          

            
         }
     } catch (InterruptedException e) {
         System.out.println("Thread " +  threadName + " interrupted.");
         jTextArea1.append("Thread " +  threadName + " interrupted."+ "\n");
     }
     System.out.println("Thread " +  threadName + " exiting.");
     jTextArea1.append("Thread " +  threadName + " exiting."+ "\n");
     
    //After execution removing from running list
     if (!running.isEmpty()){
           running.removeElement(threadName);
           
       }
     if (!waiting.isEmpty()){
        waiting.clear();
     }
     
     
   }
   
   public void start ()
   {
      
      System.out.println("Starting " +  threadName );
      jTextArea1.append("Starting " +  threadName + "\n" );
      if (t == null)
      {
         t = new Thread (this, threadName);
         
         t.start ();
      }
   }

}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        readyList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        waitingList = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        runningList = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Process Scheduler");
        getContentPane().add(jLabel2);
        getContentPane().add(jSeparator1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Ready Queue");
        jPanel2.add(jLabel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Waiting/Block");
        jPanel2.add(jLabel4);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Running");
        jPanel2.add(jLabel1);

        getContentPane().add(jPanel2);

        jPanel1.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        jScrollPane2.setViewportView(readyList);

        jPanel1.add(jScrollPane2);

        jScrollPane3.setViewportView(waitingList);

        jPanel1.add(jScrollPane3);

        jScrollPane1.setViewportView(runningList);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1);

        jPanel3.setPreferredSize(new java.awt.Dimension(300, 400));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Statistics:");
        jPanel3.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        jScrollPane4.setAutoscrolls(true);
        jScrollPane4.setWheelScrollingEnabled(false);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setPreferredSize(new java.awt.Dimension(164, 500));
        jScrollPane4.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }
    DefaultListModel ready =new DefaultListModel();
    DefaultListModel waiting =new DefaultListModel();
    DefaultListModel running =new DefaultListModel();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList readyList;
    private javax.swing.JList runningList;
    private javax.swing.JList waitingList;
    // End of variables declaration//GEN-END:variables
}
